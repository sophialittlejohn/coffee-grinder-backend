type Query {
  users: [User]
  user: User
  coffee(orderBy: CoffeeOrderByInput): [Coffee]
  coffeeDetail(id: Int, orderBy: ConfigurationOrderByInput): Coffee
  coffeeMachines: [CoffeeMachine]
}

type Mutation {
  signup(email: String!, password: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  createCoffeeMachine(name: String!, brand: String): CoffeeMachine
  updateUserPreferredMachine(id: Int!): User
  createCoffee(
    name: String!
    coffeeMachineId: Int
    price: Int
    grams: Int
    rating: Int
    street: String
    city: String
    zip: Int
    photo: CloudinaryImageInput
  ): Coffee
  updateCoffee(
    id: Int
    name: String
    street: String
    city: String
    zip: Int
    rating: Int
    photo: CloudinaryImageInput
    price: Int
    grams: Int
    amount: String
    size: String
    status: Status
  ): Coffee
  deleteCoffee(id: Int!): Coffee
  connectCoffeeMachineToUser(code: String): CoffeeMachine
  updateUser(name: String, email: String, primaryMachine: Int): User
}

type User {
  id: ID!
  createdAt: String
  name: String
  email: String!
  password: String!
  primaryMachine: Int
  coffeeMachines: [CoffeeMachine]
}

type AuthPayload {
  token: String
  user: User
}

type Coffee {
  id: ID!
  name: String!
  rating: Int
  street: String
  city: String
  zip: Int
  photo: CloudinaryImage
  coffeeMachine: CoffeeMachine
  prices: [Prices]
  configurations: [Configuration]
  updatedAt: String
}

type CoffeeMachine {
  id: ID!
  code: String
  brand: String
  name: String
  users: [User]
}

input CloudinaryImageInput {
  asset_id: ID!
  public_id: String
  version: Int
  version_id: String
  signature: String
  width: Int
  height: Int
  format: String
  resource_type: String
  created_at: String
  bytes: Int
  type: String
  etag: String
  placeholder: Boolean
  url: String
  secure_url: String
  access_mode: String
  original_filename: String
  original_extension: String
}

type CloudinaryImage {
  asset_id: ID!
  public_id: String
  version: Int
  version_id: String
  signature: String
  width: Int
  height: Int
  format: String
  resource_type: String
  created_at: String
  bytes: Int
  type: String
  etag: String
  placeholder: Boolean
  url: String
  secure_url: String
  access_mode: String
  original_filename: String
  original_extension: String
}

type Prices {
  id: ID!
  grams: Int
  price: Int
  coffeeId: Int
}

input PricesInput {
  grams: Int
  price: Int
}

enum Status {
  PERFECT
  TOO_LATE
  TOO_EARLY
  NONE
}

type Configuration {
  id: Int!
  createdAt: String
  amount: String
  size: String
  status: Status
  Coffee: Coffee
  coffeeId: Int
}

input ConfigurationOrderByInput {
  createdAt: Sort
}

input CoffeeOrderByInput {
  updatedAt: Sort
}

enum Sort {
  asc
  desc
}
